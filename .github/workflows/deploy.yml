name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push frontend image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: Build and push backend image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

      - name: Add Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_KEY }}  # SSH key to access the VPS
          script: |
            # Check if project directory exists, clone if it doesn't
            if [ ! -d "/home/${{ secrets.VPS_USER }}/websites/test-app" ]; then
              echo "Project directory does not exist. Cloning repository..."
              git clone git@github.com:Steadyx/test-app.git /home/${{ secrets.VPS_USER }}/websites/test-app
            else
              echo "Project directory exists. Pulling latest changes..."
              cd /home/${{ secrets.VPS_USER }}/websites/test-app
              git pull origin main
            fi

            # Go to the project directory
            cd /home/${{ secrets.VPS_USER }}/websites/test-app
            if [ ! -f docker-compose.prod.yml ]; then
              echo "docker-compose.prod.yml not found. Exiting."
              exit 1
            fi

            # Remove the existing stack to allow for a new deployment
            echo "Removing existing Docker stack..."
            docker stack rm test-app
            sleep 10  # Wait for the removal to complete

            # Remove network only if it exists
            if docker network ls | grep -q "test-app_test-app_default"; then
              echo "Network exists, removing it..."
              docker network rm test-app_test-app_default || echo "Network already removed or doesn't exist."
              sleep 5  # Wait for the removal of the network
            fi

            # Deploy the new stack to Docker
            echo "Deploying the Docker stack..."
            docker stack deploy -c docker-compose.prod.yml test-app
