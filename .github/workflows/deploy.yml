name: Deploy to VPS

on:
  push:
    branches:
      - main  # Trigger the workflow only on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # The type of runner to execute the job

    steps:
      # 1. Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Build and push frontend Docker image
      - name: Build and push frontend image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      # 5. Build and push backend Docker image
      - name: Build and push backend image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

      # 6. Add VPS SSH Host Key to Known Hosts
      - name: Add VPS SSH Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      # 7. Deploy to VPS
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.4  # Use a specific stable version
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22  # Change if your SSH runs on a different port
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status

            # Define project directory
            PROJECT_DIR="/home/${{ secrets.VPS_USER }}/websites/test-app"

            # Navigate to the websites directory
            cd /home/${{ secrets.VPS_USER }}/websites || exit

            # Check if the project directory exists
            if [ ! -d "test-app" ]; then
              echo "Project directory does not exist. Cloning the repository..."
              git clone -b main git@github.com:Steadyx/test-app.git test-app
            else
              echo "Project directory exists. Pulling the latest changes from main..."
              cd test-app
              git fetch origin main
              git reset --hard origin/main
            fi

            cd "$PROJECT_DIR"

            # Ensure docker-compose.prod.yml exists
            if [ ! -f docker-compose.prod.yml ]; then
              echo "docker-compose.prod.yml not found in the repository. Exiting."
              exit 1
            fi

            # Remove the existing Docker stack to allow for a new deployment
            echo "Removing existing Docker stack..."
            docker stack rm test-app || echo "No existing stack to remove."
            sleep 10  # Wait for the removal to complete

            # Remove network only if it exists
            if docker network ls | grep -q "test-app_default"; then
              echo "Network exists, removing it..."
              docker network rm test-app_default || echo "Network already removed or doesn't exist."
              sleep 5  # Wait for the removal of the network
            fi

            # Deploy the new stack to Docker
            echo "Deploying the Docker stack..."
            docker stack deploy -c docker-compose.prod.yml test-app

            # Optionally, verify that services are running
            echo "Verifying service deployment..."
            docker stack services test-app

            # Optionally, inspect frontend logs for any immediate errors
            echo "Checking Frontend logs..."
            docker service logs test-app_frontend --tail 100
