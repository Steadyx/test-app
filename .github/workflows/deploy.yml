name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

      - name: Add Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_KEY }}  # SSH key to access the VPS
          script: |
            # Store the sudo password in a variable
            # Store the sudo password in a variable
            SUDO_PASSWORD="${{ secrets.VPS_USER_PWD }}"
            sudoN() { echo "$SUDO_PASSWORD" | sudo -S "$@"; }

            echo "Navigating to project directory..."
            cd /home/edwardkemp/websites/test-app

            echo "Pulling latest changes..."
            sudoN git pull origin main

            echo "Ensuring acme.json exists..."
            if [ ! -f ./acme.json ]; then
              echo "Creating acme.json file for Let's Encrypt."
              sudoN touch ./acme.json
              sudoN chmod 600 ./acme.json
            fi

            echo "Stopping Nginx..."
            sudoN systemctl stop nginx || echo "Nginx not running."

            echo "Disabling Nginx..."
            sudoN systemctl disable nginx

            echo "Removing Docker stack..."
            sudoN docker stack rm test-app || echo "Stack test-app does not exist."

            echo "Waiting for stack removal..."
            while sudoN docker stack ls | grep -q test-app; do
              echo "Waiting for stack test-app to be removed..."
              sleep 5
            done

            echo "Removing related containers..."
            sudoN docker ps -a --filter "name=test-app" -q | xargs --no-run-if-empty sudoN docker rm -f

            echo "Removing related networks..."
            sudoN docker network ls | grep test-app_default | awk '{print $1}' | xargs --no-run-if-empty sudoN docker network rm

            echo "Pruning Docker system..."
            sudoN docker system prune -f --volumes

            echo "Deploying the updated stack..."
            sudoN docker stack deploy -c docker-compose.prod.yml test-app

            echo "Deployment completed."
