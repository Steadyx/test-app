name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

      - name: Add Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_KEY }}  # SSH key to access the VPS
          script: |
            # Navigate to project directory
            cd /home/${{ secrets.VPS_USER }}/websites/test-app

            # Pull latest changes
            git pull origin main

            # Ensure acme.json exists for Let's Encrypt
            if [ ! -f ./acme.json ]; then
              echo "Creating acme.json file for Let's Encrypt."
              touch ./acme.json
              chmod 600 ./acme.json
            fi

            # Stop and disable Nginx to avoid port conflicts
            sudo systemctl stop nginx || echo "Nginx not running."
            sudo systemctl disable nginx

            # Remove existing stack
            docker stack rm test-app

            # Wait until the stack is removed
            while docker stack ls | grep -q test-app; do
              echo "Waiting for stack test-app to be removed..."
              sleep 5
            done

            # Remove all exited containers related to test-app
            docker ps -a --filter "name=test-app" --filter "status=exited" -q | xargs --no-run-if-empty docker rm

            # Prune unused networks
            docker network prune -f

            # Deploy the updated stack
            sudo docker stack deploy -c docker-compose.prod.yml test-app
