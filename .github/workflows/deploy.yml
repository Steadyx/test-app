name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: Add Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            set -euo pipefail
            IFS=$'\n\t'

            PROJECT_DIR="/home/edwardkemp/websites/test-app"
            REPO_URL="git@github.com:Steadyx/test-app.git"
            BRANCH="main"
            STACK_NAME="test-app"
            NETWORK_NAME="test-app_default"

            # Clone or update the repo
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone "$REPO_URL" "$PROJECT_DIR"
            else
              cd "$PROJECT_DIR"
              git fetch origin
              git reset --hard origin/"$BRANCH"
            fi

            # Ensure acme.json exists with proper perms
            ACME_FILE="$PROJECT_DIR/acme.json"
            [ -f "$ACME_FILE" ] || sudo touch "$ACME_FILE"
            sudo chmod 600 "$ACME_FILE"

            # Pull the latest frontend image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest

            # Remove existing stack
            if sudo docker stack ls | grep -q "^${STACK_NAME} "; then
              echo "Removing existing stack..."
              sudo docker stack rm "${STACK_NAME}"
            fi

            # Wait for services to go down
            until ! sudo docker stack ls | grep -q "^${STACK_NAME} "; do
              echo "Waiting for stack ${STACK_NAME} removal..."
              sleep 5
            done

            # Ensure overlay network exists
            if ! sudo docker network ls --filter name=^${NETWORK_NAME}$ --format '{{.Name}}' | grep -q "^${NETWORK_NAME}$"; then
              echo "Creating network ${NETWORK_NAME}..."
              sudo docker network create --driver overlay --attachable "${NETWORK_NAME}"
            else
              echo "Network ${NETWORK_NAME} already present."
            fi

            # Update secret
            if sudo docker secret ls --format '{{.Name}}' | grep -q "^cf_api_key$"; then
              sudo docker secret rm cf_api_key
            fi
            echo "${{ secrets.CF_API_KEY }}" | sudo docker secret create cf_api_key -

            # Prune unused data
            sudo docker system prune -f --volumes

            # Deploy updated stack
            cd "$PROJECT_DIR"
            sudo docker stack deploy -c docker-compose.prod.yml "${STACK_NAME}"

            echo "âœ… Deployment finished."
