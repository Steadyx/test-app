name: Deploy to VPS

on:
  push:
    branches:
      - main  # Trigger the workflow only on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # The type of runner to execute the job

    steps:
      # 1. Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Build and push frontend Docker image
      - name: Build and push frontend image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      # 5. Build and push backend Docker image
      - name: Build and push backend image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

      # 6. Add GitHub.com SSH Key to Known Hosts
      - name: Add GitHub.com SSH Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      # 7. Add VPS SSH Host Key to Known Hosts
      - name: Add VPS SSH Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      # 8. Deploy to VPS using SSH
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.4  # Use a specific stable version
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22  # Change if your SSH runs on a different port
          script: |
            #!/bin/bash
            set -e  # Exit immediately if a command exits with a non-zero status

            # Navigate to the project directory
            cd /home/${{ secrets.VPS_USER }}/websites/test-app || exit

              # Ensure deploy.sh exists
              if [ ! -f "./deploy/deploy.sh" ]; then
                echo "deploy.sh not found. Copying it over..."
                
                # Assuming you have the local `deploy.sh` accessible via scp
                scp -i ${{ secrets.SSH_KEY }} -P 22 /users/${{ serects.VPS_USER}}/projects/tests/deply/deploy.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }}:/home/${{ secrets.VPS_USER }}/websites/test-app/deploy/
                
                # Verify the file was copied successfully
                if [ ! -f "./deploy/deploy.sh" ]; then
                  echo "Failed to copy deploy.sh. Exiting."
                  exit 1
                fi
              fi

              # Make deploy.sh executable
              chmod +x ./deploy/deploy.sh
            # Execute the deployment script
            ./deploy/deploy.sh
